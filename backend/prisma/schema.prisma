generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @id @default(autoincrement())
  firstName  String
  lastName   String
  email      String       @unique
  password   String
  role       String
  profilePicture   String?  
  progress   Progress[]
  certificates Certificate[]
  reviews     Review[]
  Enrollment Enrollment[]
  verificationCode String?
  isVerified       Boolean  @default(false)
  
}


model Category {
  id       Int      @id @default(autoincrement())
  name     String
  imageUrl String
  courses  Course[]
}

model Course {
  id               Int           @id @default(autoincrement())
  title            String
  description      String
  imageUrl         String
  introduction     String
  price            Float
  lectures         Int
  enrolledStudents String
  duration         String
  instructor       String
  instructorImage  String
  level            String
  category         Category      @relation(fields: [categoryId], references: [id])
  categoryId       Int
  students         Enrollment[]
  progress         Progress[]
  reviews          Review[]
  certificates     Certificate[]
  syllabusOutline Json?
}

model Enrollment {
  id         Int       @id @default(autoincrement())
  userId     Int
  courseId   Int
  status     String    @default("enrolled")
  user       User      @relation(fields: [userId], references: [id])
  course     Course    @relation(fields: [courseId], references: [id])
  progress   Progress? @relation(fields: [progressId], references: [id])
  progressId Int?

  @@unique([userId, courseId])
}

model Certificate {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  course   Course   @relation(fields: [courseId], references: [id])
  courseId Int
  issuedAt DateTime @default(now())
}

model Progress {
  id         Int          @id @default(autoincrement())
  userId     Int
  courseId   Int
  progress   Int // Progress in seconds
  user       User         @relation(fields: [userId], references: [id])
  course     Course       @relation(fields: [courseId], references: [id])
  Enrollment Enrollment[]

  @@unique([userId, courseId]) // Composite unique key to establish a one-to-one relationship with Enrollment
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int      @default(0)
  comment   String?
  courseId  Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}